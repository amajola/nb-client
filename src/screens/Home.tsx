/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/MfcZ2Ob2OWs
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Card } from "@/components/ui/card";
import Input from "@/components/ui/input";
import {
  HeartIcon,
  MailsIcon,
  MessageCircleIcon,
  MoveHorizontalIcon,
  RepeatIcon,
  SearchIcon,
  SettingsIcon,
  UploadIcon,
} from "@/assets/Icons";
import { hc } from "hono/client";
import { useAtom } from "jotai";
import { storedAuthorizationAtom } from "@/state";
import { AppType } from "server";
import { useForm } from "@tanstack/react-form";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { queryClient } from "@/main";

const Home = () => {
  const [auth] = useAtom(storedAuthorizationAtom);
  const navigate = useNavigate();
  const client = hc<AppType>("http://localhost:3000/", {
    headers: {
      Authorization: `Bearer ${auth.token}`,
    },
  });

  const handleRequest = async () => {
    console.log("asimthande Majola");
    try {
      const res = await client.posts.$get();

      if (res.status === 401) {
        const { error } = await res.json();
        throw new Error("User Not Authorized", { cause: error });
      }
      return await res.json();
    } catch (error) {
      console.log(error);
      if (error instanceof Error && error.message === "User Not Authorized") {
        navigate("/login");
      }
      throw error;
    }
  };

  const onSubmit = async (content: string) => {
    console.log(auth);

    return await client.posts.create.$post({
      json: {
        qoute: "Please delete this felid",
        isCountDown: true,
        countDownDate: new Date().toISOString(),
        content: content,
      },
    });
  };

  const {
    data: posts,
    error,
    isLoading,
  } = useQuery({
    queryKey: ["posts"],
    queryFn: handleRequest,
    enabled: !!auth.token, // Only run the query if the token exists
  });

  const mutation = useMutation({
    mutationFn: (content: string) => {
      return onSubmit(content);
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["posts"] }),
  });

  const form = useForm({
    defaultValues: {
      content: "",
    },
    onSubmit: async ({ value, formApi }) => {
      await mutation.mutate(value.content);
      formApi.reset();
    },
  });

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <div className="flex flex-col h-[100dvh] w-[100dvw]">
      <header className="bg-primary text-primary-foreground py-4 px-6 flex items-center justify-between">
        <div className="text-xl font-bold">Tweeter</div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm">
            <SearchIcon className="w-5 h-5" />
          </Button>
          <Button variant="ghost" size="sm">
            <MailsIcon className="w-5 h-5" />
          </Button>
          <Button variant="ghost" size="sm">
            <SettingsIcon className="w-5 h-5" />
          </Button>
          <Avatar className="h-8 w-8">
            <AvatarImage src="/placeholder-user.jpg" />
            <AvatarFallback>AC</AvatarFallback>
          </Avatar>
        </div>
      </header>
      <div className="flex-1 overflow-auto">
        <div className="grid gap-4 p-4">
          {posts && posts.posts.length > 0
            ? posts.posts.map((post) => {
                return (
                  <Card
                    className="p-4 bg-card text-card-foreground"
                    key={post.post?.id}
                  >
                    <div className="flex items-start gap-4">
                      <div className="grid gap-1 flex-1">
                        <div className="flex items-center justify-between">
                          <div className="flex">
                            <Avatar className="h-10 w-10">
                              <AvatarImage src="/placeholder-user.jpg" />
                              <AvatarFallback>AC</AvatarFallback>
                            </Avatar>
                            <div className="flex items-center gap-2">
                              <div className="text-muted-foreground text-sm">
                                {post?.user?.name}
                              </div>
                            </div>
                          </div>

                          <Button variant="ghost" size="sm">
                            <MoveHorizontalIcon className="w-5 h-5" />
                          </Button>
                        </div>
                        <p>{post?.post?.content}</p>
                        <div className="flex items-center gap-4">
                          <Button variant="ghost" size="sm">
                            <MessageCircleIcon className="w-5 h-5" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <RepeatIcon className="w-5 h-5" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <HeartIcon className="w-5 h-5" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <UploadIcon className="w-5 h-5" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </Card>
                );
              })
            : null}
        </div>
      </div>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          e.stopPropagation();
          form.handleSubmit();
        }}
      >
        <div className="bg-primary p-4 flex gap-2">
          <Avatar className="h-10 w-10">
            <AvatarImage src="/placeholder-user.jpg" />
            <AvatarFallback>AC</AvatarFallback>
          </Avatar>
          <form.Field
            name="content"
            children={(field) => (
              <>
                <Input
                  type="string"
                  name={field.name}
                  value={field.state.value}
                  onChange={(e) => field.handleChange(e.target.value)}
                  placeholder="What's happening?"
                  required
                />
                {field.state.meta.errors ? (
                  <em role="alert" className="text-xs text-right text-red-600">
                    {field.state.meta.errors.join(", ")}
                  </em>
                ) : null}
              </>
            )}
          />
          <Button type="submit" className="bg-white text-black">
            Tweet
          </Button>
        </div>
      </form>
    </div>
  );
};

export default Home;
